#!/usr/bin/python3

# MIT License
#
# Copyright (c) 2020 Rich Leggitt
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""\
Quickly scan subnets for active SSH, VNC, and other TCP servers.

Usage:

    sscan [options] [subnet [... subnet]]

Options:

    -b mS   - milliseconds to wait for banner text, 0 to disable (default 1000)
    -c mS   - milliseconds to wait for server connect (default 250)
    -h      - show this text
    -n N    - number of concurrent server connections (default 512)
    -p port - TCP port to scan (default 22)
    -v      - alias for '-p5900', search for VNC servers instead of SSH

Subnets are specified in CIDR format "IP/prefix" (if "/prefix" is not specified
then defaults to "/32", i.e. just scan that one IP address).

If no subnets are specified, sscan will attempt to determine locally attached
subnets and scan those.

Responding IPs are printed to stdout, followed by the first line of banner text
(unless -b0 was specified). All other messages go to stderr.

Exit status is 0 if at least one host responded to the scan.

If some hosts are not detected or intermittently detected, try increasing the
server connect timeout.

If strange networking errors occur, or the program spews complaints about too
many open file handles, try reducing the number of concurrent connections.

Examples:

    $ ./sscan
    Scanning 192.168.0.0/23 (512 hosts) for SSH servers...
      192.168.0.5     : SSH-2.0-OpenSSH_7.4p1 Debian-10+deb9u7
      192.168.0.3     : SSH-2.0-OpenSSH_7.6
      192.168.1.143   : SSH-2.0-OpenSSH_7.9p1 Raspbian-10+deb10u2
    3 servers found

    $ ./sscan -v 10.0.0.0/18 192.168.0.5
    Scanning 10.0.0.0/18, 192.168.0.5 (16385 hosts) for VNC servers...
      192.168.0.5     : RFB 003.008
    1 server found
"""

from __future__ import print_function # allow python2 or 3
import sys, struct, socket, threading, subprocess, platform, traceback, getopt

# Convert dotted-quad to an 'integer IP address' (this is not the same as
# sock_aton())
def aton(ip):
    return struct.unpack(">I", struct.pack("BBBB", *[int(o) for o in ip.split('.')]))[0]

# Convert an 'integer IP address' to dotted-quad
def ntoa(n):
    return "%d.%d.%d.%d" % struct.unpack('BBBB', struct.pack(">I", n))

# Convert str/bytes to str, to allow python2 or 3
def to_str(o):
    if type(o) is not str: return o.decode('utf-8','ignore')
    return o

# This is run multiple times as a thread. Try to connect to designated
# dotted-quad IP address and print message if so.
found = 0                   # total successful scans is global
lock = threading.Lock()     # arbitrate access to 'found'
def scan(ip, port, connect, banner):
    global found, lock
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(connect/1000.0)         # initial connect timeout
    if not sock.connect_ex((ip, port)):
        if banner:
            sock.settimeout(banner/1000.0)  # banner text timeout
            try: s = sock.recv(256)
            except: s = "(no banner)"
            s = " : %s" % to_str(s).splitlines()[0]
        else:
            s = ""
        lock.acquire()
        found += 1
        print("  %-15s%s" % (ip, s))
        lock.release()
    sock.close()

# Given list of CIDR subnets, expand to a list of integer IP addresses, e.g.
# ["192.168.0.0/24"] -> [0xC0A80000, ... 0xC0A800FF]. Note duplicate and
# overlapping ranges are removed.
def cidr_expand(cidrs):
    ipns = set()
    for sn in cidrs:
        ip, nm = (sn+'/32').split('/')[:2]
        ipn = aton(ip)
        shift = 32 - int(nm)
        if not shift:
            ipns.add(ipn)
        else:
            ipn &= 0xffffffff << shift
            for i in range(1 << shift):
                ipns.add(ipn + i)
    return(sorted(ipns))

# The inverse of cidr_expand(). Given list of integer IP addresses, return list
# of CIDR subnets.
def cidr_compress(ipns):

    # Return number of trailing zero bits in given num
    def trailing(num):
        if not num: return None # meh
        z = 0
        m = 1
        while not num & m:
            m <<= 1
            z += 1
        return z

    # Iterator, given a sorted list of integers, yield lists of one or more
    # sequential values
    def sequential(nums):
        if nums:
            seq = []
            for n in nums:
                if not seq or n == seq[-1]+1:
                    seq.append(n)
                else:
                    yield(seq)
                    seq = [n]
            yield(seq)

    cidrs = []
    for seqs in sequential(sorted(ipns)):
        while seqs:
            t = trailing(seqs[0])
            while t and (1 << t) > len(seqs): t -= 1
            if not t:
                cidrs.append(ntoa(seqs[0]))
            else:
                cidrs.append("%s/%d" % (ntoa(seqs[0]), 32 - t))
            del(seqs[0 : 1 << t])
    return cidrs

# Parse args command line args
connect = 250       # mS to wait for connect
banner = 2000       # mS to wait for banner text
concurrent = 512    # number of concurrent connections
port = 22           # port to be scanned
try:
    opts, args = getopt.getopt(sys.argv[1:], "b:c:hn:p:v")

    for opt, arg in opts:
        if opt == "-b":
            banner = int(arg)
            assert 0 <= banner
        elif opt == "-c":
            connect = int(arg)
            assert 0 < connect
        elif opt == "-h":
            print(__doc__)
            sys.exit(0)
        elif opt == "-n":
            concurrent = int(arg)
            assert 0 < concurrent
        elif opt == "-p":
            port = int(arg)
            assert 0 < port <= 65535
        elif opt == "-v":
            port = 5900

except Exception as e:
    print (str(e) + "\n\n" + __doc__, file = sys.stderr)
    sys.exit(1)

# Determine subnets to scan

cidrs=[]
if args:
    # Passed in args
    for n in args:
        ad, nm = (n+"/32").split('/')[:2]
        assert 0 < int(nm) <= 32
        cidrs.append(socket.gethostbyname(ad)+'/'+nm)
else:
    # Try to figure it out

    # Filter list for "non-routable" address blocks
    allow=("10.", "192.168.") + tuple(["172.%d." % n for n in range(16,32)])
    def nonroutable(l): return [n for n in l if n.startswith(allow)]

    try:
        if platform.system().lower().startswith(("windows","cygwin")):
            # On windows, ask powershell
            s = subprocess.check_output(['powershell','-c','get-netroute -addressfamily ipv4 | %{$_.destinationprefix} | select -unique | select-string -notmatch -pattern "/32|/0" | %{$_.tostring()}'])
            cidrs = nonroutable(to_str(s).splitlines())
        else:
            # Otherwise ask 'ip route' (fails on RH unless root)
            s = subprocess.check_output("ip -4 route show scope link".split())
            cidrs = nonroutable([l.split()[0] for l in to_str(s).splitlines()])
    except:
        pass

    if not cidrs:
        # Try getaddrinfo
        s = socket.getaddrinfo(socket.gethostname(),0,2)
        cidrs = nonroutable(["%s/24" % l[4][0] for l in s]) # assume all are /24

    if not cidrs:
        # Try making a dummy udp connection and see what the source address is
        sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
        sock.connect(("8.8.8.8",1))
        cidrs = nonroutable([sock.getsockname()[0]+"/24"]) # assume /24
        sock.close()

    if not cidrs:
        raise Exception("Can't find local IPv4 subnets, please specify on the command line")

# expand cidr subnets to integer IPs
ipns = cidr_expand(cidrs)

try:
    service = socket.getservbyport(port,'tcp').upper()+' servers'
except:
    if port == 5900:
        service = 'VNC servers'
    else:
        service = 'TCP port %d'  % port

print("Scanning %s (%d hosts) for %s..." % (", ".join(cidr_compress(ipns)), len(ipns), service), file=sys.stderr)

# scan IPs with multiple threads
try:
    threads={}
    for ipn in ipns:
        t = threading.Thread(target=scan, args=(ntoa(ipn), port, connect, banner))
        t.start()
        threads[ipn] = t
        while len(threads) >= concurrent:
            for k in list(threads):
                if not threads[k].is_alive():
                    del threads[k]

    # wait for remaining threads to die
    while len(threads):
        for k in list(threads):
            if not threads[k].is_alive():
                del threads[k]

    print((found or "No"), ("server" if found == 1 else "servers"), "found", file=sys.stderr)
    sys.exit(found == 0)

except KeyboardInterrupt:
    print()
    sys.exit(1)

except Exception:
    traceback.print_exc()
    sys.exit(1)
